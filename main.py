import random
import os
# import configparser
import BD.database as database
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup



database.initialize()

print('–ó–∞–ø—É—Å–∫ telegram-–±–æ—Ç–∞...')

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
token_bot = os.getenv('token_bot')    
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
if token_bot is None:
    token_bot = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º-—Ç–æ–∫–µ–Ω :")
    os.environ['token_bot'] = token_bot 
        
   
state_storage = StateMemoryStorage()
bot = TeleBot(token_bot, state_storage=state_storage)

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
known_users = database.get_all_user()
# known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'    
    UPDATE_USER_DICT = '–û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    adding_word = State()
    saving_word = State()
    deleting_word = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        database.check_user(uid, uid)
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \"/start\" yet")
        return 0


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    username  = message.from_user.full_name 
    if username is None: 
        username  = message.from_user.first_name
         
    if cid not in known_users:
        known_users.append(cid)
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        database.check_user(message.from_user.id, username )
        userStep[cid] = 0
        bot.send_message(cid, f"–ü—Ä–∏–≤–µ—Ç, {username}, –¥–∞–≤–∞–π –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
    else:
        bot.send_message(cid, f"{username}, –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–∑—É—á–µ–Ω–∏–µ...") 
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []    
    word_1 = database.get_random_words(message.from_user.id,1)[0]
    target_word = word_1[0]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    translate = word_1[1]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    word_3 = database.get_random_words(message.from_user.id,3,target_word)
    others = [word_3[0][0], word_3[1][0], word_3[2][0]]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    ud_btn = types.KeyboardButton(Command.UPDATE_USER_DICT)
    buttons.extend([next_btn, add_word_btn, delete_word_btn, ud_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.UPDATE_USER_DICT)
def updare_user_dict(message):
    cid = message.chat.id
    database.add_words_for_new_user(message.from_user.id)
    bot.send_message(cid, "–°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∏–º..")
    send_main_menu(cid)
    # create_cards(message)
    
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)    


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    bot.set_state(user_id=message.from_user.id, chat_id=message.chat.id, state=MyStates.deleting_word)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    

@bot.message_handler(state=MyStates.deleting_word)
def delete_word(message):
    cid = message.chat.id
    word_to_delete = message.text.strip().capitalize()

    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    word_to_delete_id = database.delete_user_word(message.from_user.id, word_to_delete)

    if word_to_delete_id:
        bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!")
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word_to_delete}")
    else:
        bot.send_message(cid, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ.")
        print("–°–ª–æ–≤–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")
    bot.delete_state(user_id=message.from_user.id, chat_id=message.chat.id)
    send_main_menu(cid)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    print(message.text)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.adding_word)
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    

@bot.message_handler(state=MyStates.adding_word)
def add_translate_word(message):
    cid = message.chat.id
    word = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ
    if database.check_word_existence(word):
        bot.send_message(cid, "–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
        data['target_word'] = word

    bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.saving_word)
    bot.send_message(cid, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{word}':")
    

@bot.message_handler(state=MyStates.saving_word)
def save_word(message):
    cid = message.chat.id
    translation = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not translation:
        bot.send_message(cid, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
            target_word = data.get('target_word').capitalize()

        if not target_word:
            bot.send_message(cid, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Å /start.")
            bot.delete_state(user_id=message.from_user.id, chat_id=cid)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ 
        database.add_word_to_user(message.from_user.id, target_word, translation)

        bot.send_message(cid, f"–°–ª–æ–≤–æ '{target_word}' –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ '{translation}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        bot.send_message(cid, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
    finally:
        bot.delete_state(user_id=message.from_user.id, chat_id=cid)

    send_main_menu(cid)
    
def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.NEXT),
        types.KeyboardButton(Command.UPDATE_USER_DICT) 
        
    ]
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)    



@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]   
            database.update_word_to_user_dict(message.from_user.id, target_word, data['translate_word'])        
            # next_btn = types.KeyboardButton(Command.NEXT)
            # add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            # delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            # buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(timeout=10, long_polling_timeout=5,skip_pending=True)